(define tolerance 0.00001)

(define (average a b) (/ (+ a b) 2.0))

(define (close-enough? a b)
  (< (abs (- a b)) tolerance))

(define (fixed-point f first-guess)
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next))))
  (try first-guess))

(define dx 0.00001)

(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx))
                    (g x))
                 dx)))

(define (newton-transform g)
  (lambda (x) (- x
                 (/ (g x) 
                    ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define (cube x) (* x x x))

(define (cubic a b c)
  (lambda (x) (+ (cube x)
                 (* a (square x))
                 (* b x)
                 c)))

;; 1 ]=> (newtons-method (cubic 1 2 3) 1)
;; 
;; ;Value: -1.2756822036498454
;; 
;; 1 ]=> (newtons-method (cubic 1 1 1) 1)
;; 
;; ;Value: -.9999999999997796

(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))

;; 1 ]=> (fixed-point-of-transform (cubic 1 2 3) newton-transform 1)
;; 
;; ;Value: -1.2756822036498454
