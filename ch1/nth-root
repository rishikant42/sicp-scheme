(define tolerance 0.00001)
(define (average a b) (/ (+ a b) 2.0))

(define (close-enough? a b)
  (< (abs (- a b)) tolerance))

(define (fixed-point f first-guess)
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next))))
  (try first-guess))

(define (newton-transform g)
  (lambda (x) (- x 
                 (/ (g x)
                    ((deriv g) x)))))

(define (average-damping f)
  (lambda (x) (average x (f x))))

(define (exp b n)
  (if (= n 0)
    1
    (* b (exp b (- n 1)))))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
    f
    (compose f (repeated f (- n 1)))))

(define (logB n b)
  (/ (log n) (log b)))

(define (nth-root x n)
  (let ((counter (floor (logB n 2))))
    (if (= counter 0)
      x
    (fixed-point ((repeated average-damping counter) (lambda (y) (/ x (exp y (- n 1))))) 
                 1.0))))
