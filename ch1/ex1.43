(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated1 f n)
  (define (sub-fn f g counter)
    (if (= counter 1)
      f
      (sub-fn (compose f g) g (- counter 1))))
  (sub-fn f f n))

;; 1 ]=> ((repeated1 square 2) 5) 
;; 
;; ;Value: 625
;; 
;; 1 ]=> ((repeated1 square 3) 5) 
;; 
;; ;Value: 390625

(define (repeated2 f n)
  (if (= n 1)
    f
    (compose f (repeated2 f (- n 1)))))

;; 1 ]=> ((repeated2 square 2) 5) 
;; 
;; ;Value: 625
;; 
;; 1 ]=> ((repeated2 square 3) 5) 
;; 
;; ;Value: 390625

(define (repeated3 f n)
  (define (iter counter result)
    (if (= counter  1)
      result
      (iter (- counter 1) (compose f result))))
  (iter n f))

;; 1 ]=> ((repeated3 square 2) 5) 
;; 
;; ;Value: 625
;; 
;; 1 ]=> ((repeated3 square 3) 5) 
;; 
;; ;Value: 390625
