(define (average a b) (/ (+ a b) 2.0))

(define tolerance 0.00001)

(define (close-enough? a b)
  (< (abs (- a b)) tolerance))

(define (fixed-point f first-guess)
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next))))
  (try first-guess))

;; (define (sqrt x)
;;   (fixed-point (lambda (y) (average y (/ x y)))
;;                1.0))

;; (define (sqrt x)
;;   (define (fn y)
;;     (average y (/ x y)))
;;   (fixed-point fn 1.0))

(define (average-damping f)
  (lambda (x) (average x (f x))))

(define (sqrt x)
  (fixed-point (average-damping (lambda (y) (/ x y)))
               1.0))

(define (cube-root x)
  (fixed-point (average-damping (lambda (y) (/ x (square y))))
               1.0))

(define (cube x) (* x x x))

(define (quad-root x)
  (fixed-point (average-damping (average-damping (lambda (y) (/ x (cube y)))))
               1.0))

;; (define (sqr1 x)
;;   (* x x))
;; 
;; (define sqr2
;;   (lambda (x) (* x x)))

;; (sqr2 5)
;; ((lambda (x) (* x x)) 5)

(define (average-damping2 f)
  (define (sub-fn x)
    (average x (f x)))
  sub-fn)

(define (sqrt2 x)
  (fixed-point (average-damping2 (lambda (y) (/ x y)))
               1.0))

(define (sqrt3 x)
  (define (fn y)
    (/ x y))
  (fixed-point (average-damping2 fn) 1.0))
