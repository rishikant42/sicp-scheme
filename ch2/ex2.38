(define nil '())

(define (fold-right op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (fold-right op initial (cdr sequence)))))

;; (fold-right + 0 '(1 2 3))
;; (+ 1 (fold-right + 0 '(2 3)))
;; (+ 1 (+ 2 (fold-right + 0 '(3))))
;; (+ 1 (+ 2 (+ 3 fold-right + 0 '())))
;; (+ 1 (+ 2 (+ 3 0)))
;; (+ 1 (+2 3))
;; (+ 1 5)
;; 6

(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
      result
      (iter (op result (car rest))
            (cdr rest))))
  (iter initial sequence))

;; (fold-left + 0 '(1 2 3))
;; (iter 0 '(1 2 3))
;; (iter 1 '(2 3))                       (+ 0 1) = 1
;;                               
;; (iter 3 '(3))                         (+ 1 2) = 3
;;                               
;; (iter 6 '())                          (+ 3 3) = 6
;; 6


;; (fold-right / 1 '(1 2 3))
;; (/ 1 (fold-right / 1 '(2 3)))
;; (/ 1 (/ 2 (fold-right / 1 '(3))))
;; (/ 1 (/ 2 (/ 3 (fold-right '()))))
;; (/ 1 (/ 2 (/ 3 1)))
;; (/ 1 (/ 2 3))
;; (/ 1 2/3)
;; 3/2
;; 
;; (fold-left / 1 '(1 2 3))
;; (iter 1 '(1 2 3))
;; (iter 1 '(2 3))              (/ 1 1) = 1
;; (iter 1/2 '(3))              (/ 1 2) = 1/2
;; (iter 1/6 '())               (/ 1/2 3) = 1/6
;; 1/6
;; 
;; (fold-right list nil '(1 2 3))
;; (list 1 (fold-right list  nil '(2 3)))
;; (list 1 (list 2 (fold-right list nil '(3))))
;; (list 1 (list 2 (list 3  (fold-right list nil '()))))
;; (list 1 (list 2 (list 3 nil)))
;; (list 1 (list 2 '(3 ())))
;; (list 1 '(2 (3 ())))
;; (1 (2 (3 ())))
;; 
;; (fold-left list nil '(1 2 3))
;; (iter nil '(1 2 3))
;; (iter '(() 1) '(2 3))
;; (iter '((() 1) 2) '(3))
;; (iter '(((() 1) 2) 3) '())
;; (((() 1) 2) 3)


;; If operation op is associative function (like +, *) than fold-left & fold-right will produce same result
