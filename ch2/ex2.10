(define (make-interval x y) 
  (cons x y))

(define (lower-bound z) 
  (min (car z) (cdr z)))

(define (upper-bound z)
  (max (car z) (cdr z)))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (let ((a (upper-bound y))
        (b (lower-bound y)))
    (if (or (= a 0) (= b 0))
      (error "Divison with interval having 0 at boundary isn't possible")
      (mul-interval x 
                    (make-interval (/ 1.0 a)
                                   (/ 1.0 b))))))

;; (define (div-interval x y)
;;   (let ((a (upper-bound y))
;;         (b (lower-bound y)))
;;     (cond ((and (= a 0) (= b 0)) (make-interval 0 0))
;;           ((= a 0) (mul-interval x
;;                                  (make-interval 0 (/ 1.0 b))))
;;           ((= b 0) (mul-interval x
;;                                  (make-interval (/ 1.0 a) 0)))
;;           
;;           (else (mul-interval x 
;;                               (make-interval (/ 1.0 a)
;;                                              (/ 1.0 b)))))))


(define (sub-interval x y)
  (add-interval x
                (make-interval (- (upper-bound y))
                               (- (lower-bound y)))))

(define (width z)
  (/ (abs (- (upper-bound z)  (lower-bound z)))
     2.0))

