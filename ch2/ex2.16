;; refrence: http://wiki.drewhess.com/wiki/SICP_exercise_2.16
;; In the interval arithmetic system we've defined, some of the laws of algebra that we're accustomed to don't apply to certain ooperations, 
;; so algebraic expressions that are equivalent in a non-interval arithmetic system are not necessarily equivalent in an interval arithmetic system.

;; For example, consider the distributive law. The distributive law states that

;; <math> a(b+c) = ab+ac </math>

;; but this law does not universally apply in our interval arithmetic system. Here's an example:


(define (make-interval x y) 
  (cons x y))

(define (lower-bound z) 
  (min (car z) (cdr z)))

(define (upper-bound z)
  (max (car z) (cdr z)))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

;; 1 ]=> (define a (make-interval 2 4))
;; 
;; ;Value: a
;; 
;; 1 ]=> (define b (make-interval -2 0))
;; 
;; ;Value: b
;; 
;; 1 ]=> (define c (make-interval 3 8))
;; 
;; ;Value: c
;; 
;; (define x (mul-interval a
;;                         (add-interval b c)))
;; 
;; ;Value: x
;; 
;; 1 ]=> x
;; 
;; ;Value 11: (2 . 32)
;; 
;;  (define y (add-interval (mul-interval a b)
;;                          (mul-interval a c)))
;; 
;; ;Value: y
;; 
;; 1 ]=> y
;; 
;; ;Value 12: (-2 . 32)
;; 
;; 1 ]=> (lower-bound x)
;; 
;; ;Value: 2
;; 
;; 1 ]=> (lower-bound y)
;; 
;; ;Value: -2
;; 
;; hence in case of interval a, b, c 
;; a(b+c) not equal to (ab+ac)
