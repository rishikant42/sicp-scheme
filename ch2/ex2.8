(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))

;; (define (sub-interval x y)
;;   (let ((p1 (- (lower-bound x) (lower-bound y)))
;;         (p2 (- (lower-bound x) (upper-bound y)))
;;         (p3 (- (upper-bound x) (lower-bound y)))
;;         (p4 (- (upper-bound x) (upper-bound y))))
;;     (make-interval (min p1 p2 p3 p4)
;;                    (max p1 p2 p3 p4))))


;; better approach of sub-interval 

;; (define (sub-interval x y) 
;;   (make-interval (- (lower-bound x) (upper-bound y)) 
;;                  (- (upper-bound x) (lower-bound y))))

;; Another approach

(define (sub-interval x y)
  (add-interval x
                (make-interval (- (upper-bound y))
                               (- (lower-bound y)))))

(define (make-interval x y) 
  (cons x y))

(define (lower-bound z) 
  (min (car z) (cdr z)))

(define (upper-bound z)
  (max (car z) (cdr z)))
