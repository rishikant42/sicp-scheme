(define nil '())

(define (accumulate op init seq)
  (if (null? seq)
    init
    (op (car seq)
        (accumulate op init (cdr seq)))))

(define (enumerate-interval low high)
  (if (> low high)
    nil
    (cons low
          (enumerate-interval (+ low 1) high))))

(define (filter predicate seq)
  (if (null? seq)
    nil
    (if (predicate (car seq))
      (cons (car seq) (filter predicate (cdr seq)))
      (filter predicate (cdr seq)))))


(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n divisor)
  (cond ((> (square divisor) n) n)
        ((devides? n divisor) divisor)
        (else (find-divisor n (+ divisor 1)))))

(define (devides? n divisor)
  (= (remainder n divisor) 0))

(define (prime? n)
  (if (= n 1)
    false
    (= (smallest-divisor n) n)))

(define (all-pair n)
  (accumulate append
              nil
              (map (lambda (i) 
                     (map (lambda (j) (list i j))
                          (enumerate-interval 1 (- i 1))))
                   (enumerate-interval 1 n))))

(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))

(define (filter-pair item)
  (if (null? item)
    nil
    (if (prime-sum? (car item))
      (cons (car item) (filter-pair (cdr item)))
      (filter-pair (cdr item)))))

(define (list-maker pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (prime-sum-pairs n)
  (let ((all (all-pair n)))
    (map list-maker
         (filter-pair all))))
