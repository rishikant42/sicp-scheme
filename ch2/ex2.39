(define nil '())

(define (reverse sequence)
  (define (iter items result)
    (if (null? items)
      result
      (iter (cdr items)
            (cons (car items) result))))
  (iter sequence nil))

(define (fold-right op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (fold-right op initial (cdr sequence)))))

(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
      result
      (iter (op result (car rest))
            (cdr rest))))
  (iter initial sequence))

(define (reverse sequence)
  (fold-right (lambda (x y) (append y (list x)))
                nil
                sequence))

;; (reverse '(1 2 3))
;; (fold-right (lambda (x y) (append y (list x))) nil '(1 2 3))
;; op = (lambda (x y) (append y (list x)))
;; FR = fold-right
;; 
;; (FR op nil '(1 2 3))
;; (append (FR op nil '(2 3)) '(1))
;; (append (append (FR op nil '(3)) '(2)) '(1))
;; (append (append (append (FR op nil '()) '(3)) '(2)) '(1))
;; (append (append (append '() '(3)) '(2)) '(1))
;; (3 2 1)


(define (reverse sequence)
  (fold-left (lambda (x y) (cons y x))
             nil
             sequence))

;; (reverse '(1 2 3))
;; (fold-left (lambda (x y) (cons y x)) nil '(1 2 3))
;; 
;; (iter nil '(1 2 3))
;; (iter '(1) '(2 3))     (cons 1 '()) = '(1)
;; (iter '(2 1) '(3))     (cons 2 '(1)) = '(2 1)
;; (iter '(3 2 1) '())    (cons 3 '(2 1)) = '(3 2 1)
;; (3 2 1)
