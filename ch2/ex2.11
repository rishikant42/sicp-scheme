(define (make-interval x y) 
  (cons x y))

(define (lower-bound z) 
  (min (car z) (cdr z)))

(define (upper-bound z)
  (max (car z) (cdr z)))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (define (sign z)                                                    ;; sign of upper & lower bound of z-interval
    (cond ((and (>= (upper-bound z) 0) (>= (lower-bound z) 0)) 1)     ;; both are +ve, return 1
          ((and (< (upper-bound z) 0) (< (lower-bound z) 0)) -1)      ;; both are -ve, return -1
          (else 0)))                                                  ;; opposite sign, return 0
  (let ((l-x (lower-bound x))
        (u-x (upper-bound x))
        (l-y (lower-bound y))
        (u-y (upper-bound y)))
    (cond ((= (sign x) 1)
           (cond ((= (sign y) 1) (make-interval (* l-x l-y) (* u-x u-y)))
                 ((= (sign y) -1) (make-interval (* u-x l-y) (* l-x u-y)))
                 (else (make-interval (* u-x l-y) (* u-x u-y)))))
          ((= (sign x) -1)
           (cond ((= (sign y) 1) (make-interval (* l-x u-y) (* u-x l-y)))
                 ((= (sign y) -1) (make-interval (* u-x u-y) (* l-x l-y)))
                 (else (make-interval (* l-x u-y) (* l-x l-y)))))
          (else
            (cond ((= (sign y) 1) (make-interval (* l-x u-y) (* u-x u-y)))
                  ((= (sign y) -1) (make-interval (* u-x l-y) (* l-x l-y)))
                  (else (make-interval 
                          (min (* l-x u-y) (* u-x l-y))
                          (max (* l-x l-y) (* u-x u-y)))))))))


(define (div-interval x y)
  (let ((a (upper-bound y))
        (b (lower-bound y)))
    (if (or (= a 0) (= b 0))
      (error "Divison with interval having 0 at boundary isn't possible")
      (mul-interval x 
                    (make-interval (/ 1.0 a)
                                   (/ 1.0 b))))))

(define (sub-interval x y)
  (add-interval x
                (make-interval (- (upper-bound y))
                               (- (lower-bound y)))))

(define (width z)
  (/ (abs (- (upper-bound z)  (lower-bound z)))
     2.0))

