(define (average a b) (/ (+ a b) 2.0))

(define (x-point p)
  (car p))

(define (y-point p)
  (cdr p))

(define (make-segment p1 p2)
  (cons p1 p2))

(define (start-segment p)
  (car p))

(define (end-segment p)
  (cdr p))

(define (make-point x y)
  (cons x y))

(define (midpoint-segment p)
  (let ((start (start-segment p))
        (end (end-segment p)))
    (make-point (average (x-point start)
                         (x-point end))
                (average (y-point start)
                         (y-point end)))))

(define (distance-bw-2-points p1 p2)
  (let ((x1 (x-point p1))
        (y1 (y-point p1))
        (x2 (x-point p2))
        (y2 (y-point p2)))
    (sqrt (+ (square (- x2 x1))
             (square (- y2 y1))))))

(define (area-rectangle l1-segment l2-segment)
  (let ((p1 (start-segment l1-segment))
        (p2 (end-segment l1-segment))
        (p3 (start-segment l2-segment))
        (p4 (end-segment l2-segment)))
    (let ((length (distance-bw-2-points p1 p2))
          (width (distance-bw-2-points p1 p3)))
      (* length width))))

(define (perimeter-rectangle l1-segment l2-segment)
  (let ((p1 (start-segment l1-segment))
        (p2 (end-segment l1-segment))
        (p3 (start-segment l2-segment))
        (p4 (end-segment l2-segment)))
    (let ((length (distance-bw-2-points p1 p2))
          (width (distance-bw-2-points p1 p3)))
      (* 2 (+ length width)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;; 
;;;;;;    p3  ---------------------- p4       ==> l2-line, & p3, p4 are it's point
;;;;;;        |                    |
;;;;;;        |                    |
;;;;;;        |                    |
;;;;;;        |                    |
;;;;;;    p1  ---------------------- p2        ==> l1-line & p1, p2 are it's point 
;;;;;;

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")"))

;; 1 ]=> (define a (make-point 6 8))
;; 
;; ;Value: a
;; 
;; 1 ]=> (define b (make-point 3 4))
;; 
;; ;Value: b
;; 
;; 1 ]=> (distance-bw-2-points a b)
;; 
;; ;Value: 5


;; 1 ]=> (define a (make-point -2 0))
;; 
;; ;Value: a
;; 
;; 1 ]=> (define b (make-point 2 0))
;; 
;; ;Value: b
;; 
;; 1 ]=> (define c (make-point -2 2))
;; 
;; ;Value: c
;; 
;; 1 ]=> (define d (make-point 2 2))
;; 
;; ;Value: d
;; 
;; 1 ]=> (distance-bw-2-points a b)
;; 
;; ;Value: 4
;; 
;; 1 ]=> (distance-bw-2-points a c)
;; 
;; ;Value: 2
;; 
;; 
;; 1 ]=> (define p1 (make-segment a b))
;; 
;; ;Value: p1
;; 
;; 1 ]=> (define p2 (make-segment c d))
;; 
;; ;Value: p2
;; 
;; 1 ]=> (area-rectangle p1 p2)
;; 
;; ;Value: 8
