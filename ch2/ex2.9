(define (make-interval x y) 
  (cons x y))

(define (lower-bound z) 
  (min (car z) (cdr z)))

(define (upper-bound z)
  (max (car z) (cdr z)))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))


(define (sub-interval x y)
  (add-interval x
                (make-interval (- (upper-bound y))
                               (- (lower-bound y)))))

(define (width z)
  (/ (abs (- (upper-bound z)  (lower-bound z)))
     2.0))

;; 1 ]=> (define a (make-interval -4 6))
;; 
;; ;Value: a
;; 
;; 1 ]=> (define b (make-interval 2 4))
;; 
;; ;Value: b
;; 
;; 1 ]=> (define c (add-interval a b))
;; 
;; ;Value: c
;; 
;; 1 ]=> (width a)
;; 
;; ;Value: 5.
;; 
;; 1 ]=> (width b)
;; 
;; ;Value: 1.
;; 
;; 1 ]=> (width c)
;; 
;; ;Value: 6.
;; 
;; 1 ]=> (define c (sub-interval a b))
;; 
;; ;Value: c
;; 
;; 1 ]=> (width c)
;; 
;; ;Value: 6.
;; 
;; Hence In case of addition & substraction, width get added of resultant interval.
;; Let's see genral result
;; 
;; case-I addition:
;; 
;; x = [a b]   width-x = (b - a) / 2
;; y = [c d]   width-y = (d - c) / 2
;; 
;; width-x + width-y = [(b + d) - (a + c)] / 2
;; 
;; z = x + y = [a+c b+d]    width-z = [(b + d) - (a + c)] / 2
;; 
;; hence, width-z = width-x + width-y
;; 
;; case-II substraction:
;; 
;; z = x - y = [a-d b-c]    width-z = [(b + d) - (a + c)] / 2
;; 
;; hence width-z = width-x + width-y


;; let's see result for multiplication & division

;; 1 ]=> (define a (make-interval -4 6))
;; 
;; ;Value: a
;; 
;; 1 ]=> (define b (make-interval 2 4))
;; 
;; ;Value: b
;; 
;; 1 ]=> (define c (mul-interval a b))
;; 
;; ;Value: c
;; 
;; 1 ]=> (width a)
;; 
;; ;Value: 5.
;; 
;; 1 ]=> (width b)
;; 
;; ;Value: 1.
;; 
;; 1 ]=> (width c)
;; 
;; ;Value: 20.
;; 
;; 
;; 1 ]=> (define c (div-interval a b))
;; 
;; ;Value: c
;; 
;; 1 ]=> (width c)
;; 
;; ;Value: 2.5

;; hence that property is not true for multiplication or division.
