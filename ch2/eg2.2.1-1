(define (list-ref items n)
  (if (= n 0)
    (car items)
    (list-ref (cdr items) (- n 1))))

;; Recursive process

;; (define (length items)
;;   (if (null? items)
;;     0
;;     (+ 1 (length (cdr items)))))

;; Iterative process

(define (length items)
  (define (length-iter a count)
    (if (null? a)
      count
      (length-iter (cdr a) (+ count 1))))
  (length-iter items 0))

(define (append list1 list2)
  (if (null? list1)
    list2
    (cons (car list1)
          (append (cdr list1) list2))))

;; Another approach

;; (define (append list1 list2)
;;   (define (append-iter result n)
;;     (if (> n (length list1))
;;       result
;;       (append-iter (cons (list-ref list1 (- (length list1) n))
;;                          result)
;;                    (+ n 1))))
;;   (append-iter list2 1))
