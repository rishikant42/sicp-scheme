(define (length items)
  (if (null? items)
    0
    (+ 1 (length (cdr items)))))

(define (list-ref items n)
  (if (= n 0)
    (car items)
    (list-ref (cdr items) (- n 1))))

;; (define (reverse items)
;;   (define (reverse-rec n)
;;     (if (< (length items) n)
;;       (list ())
;;       (cons (list-ref items (- (length items) n)) (reverse-rec (+ n 1)))))
;;   (reverse-rec 1))
;; 

(define (reverse items) 
  (define (iter items result) 
    (if (null? items) 
      result 
      (iter (cdr items) (cons (car items) result)))) 
  (iter items '())) 

;; OUTPUT:
;; 
;; 1 ]=> (reverse '(1 2 3 4 5))
;; 
;; ;Value 14: (5 4 3 2 1)
;; 
;; Explanation:
;; 
;; (reverse '(1 2 3 4 5))
;; 
;; (iter '(1 2 3 4 5) '())
;; 
;; (iter '(2 3 4 5) '(1) )   ;; (cons (car '(1 2 3 4 5)) '())
;; 
;; (iter '(3 4 5) '(2 1))    ;; (cons (car '(2 3 4 5)) '(1))
;; 
;; (iter '(4 5) '(3 2 1))    ;; (cons (car '(3 4 5)) '(2 1))
;; 
;; (iter '(5) '(4 3 2 1))    ;; (cons (car '(4 5)) '(3 2 1))
;; 
;; (iter '() '(5 4 3 2 1))   ;; (cons (car '(5)) '(4 3 2 1))
;; 
;; (5 4 3 2 1)
